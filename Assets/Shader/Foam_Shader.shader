Shader "Foam_Shader" {
	Properties {
		_FoamTint ("Foam Tint", Vector) = (0.4745891,0.5197171,0.9779412,0)
		_Cutoff ("Cutoff", Range(0, 1)) = 0
		_BorderWidth ("Border Width", Range(0, 5)) = 0
		_NoiseA ("Noise A", 2D) = "white" {}
		_TileNoiseA ("Tile Noise A", Vector) = (2,1.5,0,0)
		_NoiseBSpeed ("Noise B Speed", Float) = 0.023
		_NoiseAMaskClip ("Noise A Mask Clip", Float) = 0
		_NoiseB ("Noise B", 2D) = "white" {}
		_TileNoiseB ("Tile Noise B", Vector) = (1,1,0,0)
		_NoiseASpeed ("Noise A Speed", Float) = 0.023
		_NoiseBMaskClip ("Noise B Mask Clip", Float) = 1
		[HideInInspector] _TextureSample0 ("Texture Sample 0", 2D) = "white" {}
		[HideInInspector] _texcoord ("", 2D) = "white" {}
		[HideInInspector] __dirty ("", Float) = 1
	}
	SubShader {
		Tags { "IsEmissive" = "true" "QUEUE" = "AlphaTest+0" "RenderType" = "Custom" }
		Pass {
			Name "FORWARD"
			Tags { "IsEmissive" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest+0" "RenderType" = "Custom" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			GpuProgramID 21140
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0.xyz = _FoamTint.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.x = vs_TEXCOORD0.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _BorderWidth;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					mediump float u_xlat16_1;
					vec2 u_xlat2;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_1 = texture(_TextureSample0, u_xlat1.xy).x;
					    u_xlat2.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
					#else
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					#endif
					    u_xlat2.x = log2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * _BorderWidth;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat0.x = u_xlat16_1 * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat5.xyz;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0 = inversesqrt(u_xlat0);
					    vs_TEXCOORD1.xyz = vec3(u_xlat0) * u_xlat1.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _texcoord_ST;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(2) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat6.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _FoamTint;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					highp vec4 phase0_Input0_1;
					in highp float vs_TEXCOORD4;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					vec2 u_xlat4;
					void main()
					{
					    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD4, 0);
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = phase0_Input0_1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2.xy = phase0_Input0_1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat4.xy = phase0_Input0_1.yz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
					#else
					    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
					#endif
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * _BorderWidth;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = (-unity_FogColor.xyz) + _FoamTint.xyz;
					    u_xlat0.xyz = u_xlat4.yyy * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
			}
		}
		Pass {
			Name "FORWARD"
			Tags { "IsEmissive" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "AlphaTest+0" "RenderType" = "Custom" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			ZWrite Off
			GpuProgramID 72952
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					uniform lowp sampler2D _TextureSample0;
					uniform lowp sampler2D _NoiseB;
					uniform lowp sampler2D _NoiseA;
					varying highp vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture2D(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture2D(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat10_2 = texture2D(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat10_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * -1))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD0.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 1.0);
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
			}
		}
		Pass {
			Name "ShadowCaster"
			Tags { "IsEmissive" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "AlphaTest+0" "RenderType" = "Custom" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			GpuProgramID 220305
			Program "vp" {
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					uniform 	vec2 _TileNoiseA;
					uniform 	vec2 _TileNoiseB;
					uniform 	float _NoiseAMaskClip;
					uniform 	float _NoiseBMaskClip;
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(_TileNoiseB.x, _TileNoiseB.y, _TileNoiseA.x, _TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(_NoiseBMaskClip, _NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
					#else
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					#endif
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * _BorderWidth;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat2.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_2 = texture(_TextureSample0, u_xlat2.xy).x;
					    u_xlat0.x = u_xlat16_2 * u_xlat0.x + u_xlat1;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "INSTANCING_ON" "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb3 = unity_LightShadowBias.z!=0.0;
					#endif
					    if(u_xlatb3){
					        u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					        u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					        u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat0.x = inversesqrt(u_xlat0.x);
					        u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					        u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					        u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat9 = inversesqrt(u_xlat9);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					        u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					        u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					        u_xlat9 = sqrt(u_xlat9);
					        u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					        u_xlat1.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    }
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    u_xlat1.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat6;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "INSTANCING_ON" "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb3 = unity_LightShadowBias.z!=0.0;
					#endif
					    if(u_xlatb3){
					        u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					        u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					        u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat0.x = inversesqrt(u_xlat0.x);
					        u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					        u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					        u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat9 = inversesqrt(u_xlat9);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					        u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					        u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					        u_xlat9 = sqrt(u_xlat9);
					        u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					        u_xlat1.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    }
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    u_xlat1.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat6;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "INSTANCING_ON" "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb3 = unity_LightShadowBias.z!=0.0;
					#endif
					    if(u_xlatb3){
					        u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					        u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					        u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat0.x = inversesqrt(u_xlat0.x);
					        u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					        u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					        u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat9 = inversesqrt(u_xlat9);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					        u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					        u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					        u_xlat9 = sqrt(u_xlat9);
					        u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					        u_xlat1.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    }
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    u_xlat1.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat6;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "INSTANCING_ON" "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb3 = unity_LightShadowBias.z!=0.0;
					#endif
					    if(u_xlatb3){
					        u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					        u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					        u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat0.x = inversesqrt(u_xlat0.x);
					        u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					        u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					        u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat9 = inversesqrt(u_xlat9);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					        u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					        u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					        u_xlat9 = sqrt(u_xlat9);
					        u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					        u_xlat1.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    }
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "INSTANCING_ON" "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb3 = unity_LightShadowBias.z!=0.0;
					#endif
					    if(u_xlatb3){
					        u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					        u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					        u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat0.x = inversesqrt(u_xlat0.x);
					        u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					        u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					        u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat9 = inversesqrt(u_xlat9);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					        u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					        u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					        u_xlat9 = sqrt(u_xlat9);
					        u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					        u_xlat1.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    }
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "INSTANCING_ON" "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    vs_TEXCOORD2.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3] * in_POSITION0.wwww + u_xlat1;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb3 = unity_LightShadowBias.z!=0.0;
					#endif
					    if(u_xlatb3){
					        u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					        u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					        u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					        u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat0.x = inversesqrt(u_xlat0.x);
					        u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					        u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					        u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat9 = inversesqrt(u_xlat9);
					        u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					        u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					        u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					        u_xlat9 = sqrt(u_xlat9);
					        u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					        u_xlat1.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    }
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _Time;
					uniform 	int unity_BaseInstanceID;
					uniform 	float _BorderWidth;
					uniform 	vec4 _TextureSample0_ST;
					uniform 	float _NoiseBSpeed;
					uniform 	float _NoiseASpeed;
					uniform 	float _Cutoff;
					struct Foam_ShaderArray_Type {
						vec2 _TileNoiseA;
						vec2 _TileNoiseB;
						float _NoiseAMaskClip;
						float _NoiseBMaskClip;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_Foam_Shader {
					#endif
						UNITY_UNIFORM Foam_ShaderArray_Type Foam_ShaderArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _TextureSample0;
					UNITY_LOCATION(1) uniform mediump sampler2D _NoiseB;
					UNITY_LOCATION(2) uniform mediump sampler2D _NoiseA;
					in highp vec2 vs_TEXCOORD1;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					int u_xlati1;
					float u_xlat2;
					vec2 u_xlat4;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.yw = _Time.yy * vec2(_NoiseBSpeed, _NoiseASpeed);
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = int(u_xlati1 << 1);
					    u_xlat0 = vs_TEXCOORD1.xyxy * vec4(Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseB.y, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.x, Foam_ShaderArray[u_xlati1 / 2]._TileNoiseA.y) + u_xlat0;
					    u_xlat0.x = texture(_NoiseB, u_xlat0.xy).x;
					    u_xlat0.y = texture(_NoiseA, u_xlat0.zw).x;
					    u_xlat0.xy = u_xlat0.xy * vec2(Foam_ShaderArray[u_xlati1 / 2]._NoiseBMaskClip, Foam_ShaderArray[u_xlati1 / 2]._NoiseAMaskClip);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat2 = vs_TEXCOORD1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
					#else
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					#endif
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * _BorderWidth;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat4.xy = vs_TEXCOORD1.xy * _TextureSample0_ST.xy + _TextureSample0_ST.zw;
					    u_xlat16_4 = texture(_TextureSample0, u_xlat4.xy).x;
					    u_xlat0.x = u_xlat16_4 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x + (-_Cutoff);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "INSTANCING_ON" "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "INSTANCING_ON" "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "INSTANCING_ON" "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "INSTANCING_ON" "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "INSTANCING_ON" "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "INSTANCING_ON" "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!!!GLES3"
				}
			}
		}
	}
	Fallback "Diffuse"
	CustomEditor "ASEMaterialInspector"
}